[
    {
        "id": "aff208f6d9a2dcb3",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "52fe503a99b806b9",
        "type": "mqtt in",
        "z": "aff208f6d9a2dcb3",
        "name": "",
        "topic": "sensor-pkl/rainfall",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "a2f96cead7353d8d",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 260,
        "y": 380,
        "wires": [
            [
                "142ed083344fbb6a"
            ]
        ]
    },
    {
        "id": "ac74d8baa78e26e6",
        "type": "function",
        "z": "aff208f6d9a2dcb3",
        "name": "Format Data",
        "func": "var data = [[]];\nvar label = [];\n\nfor (var i = 0; i < msg.payload.rows.length; i++) {\n    var row = msg.payload.rows[i];\n    data[0].push(row['sessionrain']);  // ambil nilai curah hujan\n\n    // Ambil jam dan menit dari created_at\n    const d = new Date(row['created_at']);\n    // d.setHours(d.getHours() + 7);\n    const hours = String(d.getHours()).padStart(2, '0');\n    const minutes = String(d.getMinutes()).padStart(2, '0');\n\n    // Format jadi HH:MM\n    label.push(`${hours}:${minutes}`);\n}\n\nvar m = {\n    series: [\"Curah Hujan (mm)\"],\n    data: data,\n    labels: label\n};\n\nmsg.payload = [m];\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 520,
        "wires": [
            [
                "3d916e8f9912bbf3"
            ]
        ]
    },
    {
        "id": "142ed083344fbb6a",
        "type": "function",
        "z": "aff208f6d9a2dcb3",
        "name": "get data",
        "func": "// Ambil nilai dari msg.payload.value\nlet tippingCount = msg.payload.tippingCount;\nlet sessionRain = msg.payload.sessionRain;\n\n // Ambil nilai dari msg.payload.value\nlet temp = msg.payload.temp;\nlet rh = msg.payload.rh;\n\nlet d = new Date();\n// geser ke +7 jam\nd.setHours(d.getHours() + 7);\nlet createdAt = d.toISOString();\n\n\n// pastikan moisture adalah angka\nlet tippingCountNum = parseFloat(tippingCount);\nif (isNaN(tippingCountNum)) {\n    tippingCountNum = 0;  // default kalau kosong/error\n}\nlet sessionRainNum = parseFloat(sessionRain);\nif (isNaN(sessionRainNum)) {\n    sessionRainNum = 0;  // default kalau kosong/error\n}\n\n// set payload baru\nmsg.payload = {\n    tippingCount: tippingCountNum,\n    sessionRain: sessionRainNum,\n    createdAt: createdAt\n};\n\nreturn msg;\n ",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 380,
        "wires": [
            [
                "517ae685618e3506",
                "015ed2252f17c8f3"
            ]
        ]
    },
    {
        "id": "7bf629f226e333b2",
        "type": "function",
        "z": "aff208f6d9a2dcb3",
        "name": "Delete data",
        "func": "msg.payload = [];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 580,
        "wires": [
            [
                "3d916e8f9912bbf3"
            ]
        ]
    },
    {
        "id": "ed5932ccfa4fc117",
        "type": "postgrestor",
        "z": "aff208f6d9a2dcb3",
        "name": "sensor value",
        "query": "SELECT *\nFROM (\n    SELECT *\n    FROM rainfall_data\n    ORDER BY id DESC\n    LIMIT 10\n) AS latest\nORDER BY id ASC;\n",
        "postgresDB": "d1c317d01ab06818",
        "output": true,
        "outputs": 1,
        "throwErrors": false,
        "x": 910,
        "y": 520,
        "wires": [
            [
                "ac74d8baa78e26e6"
            ]
        ]
    },
    {
        "id": "517ae685618e3506",
        "type": "postgrestor",
        "z": "aff208f6d9a2dcb3",
        "name": "input sensor value rain",
        "query": "INSERT INTO rainfall_data (tippingcount, sessionrain, created_at, updated_at) \nVALUES ({{ msg.payload.tippingCount }}, {{ msg.payload.sessionRain }}, '{{ msg.payload.createdAt }}', '{{ msg.payload.createdAt }}');",
        "postgresDB": "d1c317d01ab06818",
        "output": true,
        "outputs": 1,
        "throwErrors": false,
        "x": 700,
        "y": 460,
        "wires": [
            [
                "ed5932ccfa4fc117"
            ]
        ]
    },
    {
        "id": "a114174924d0eca1",
        "type": "ui_button",
        "z": "aff208f6d9a2dcb3",
        "name": "",
        "group": "240763e370494493",
        "order": 3,
        "width": 7,
        "height": 1,
        "passthru": false,
        "label": "Refresh Data Curah Hujan",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-refresh",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 640,
        "y": 520,
        "wires": [
            [
                "ed5932ccfa4fc117"
            ]
        ]
    },
    {
        "id": "c2e7a1b445dc8aea",
        "type": "ui_button",
        "z": "aff208f6d9a2dcb3",
        "name": "",
        "group": "240763e370494493",
        "order": 2,
        "width": 7,
        "height": 1,
        "passthru": false,
        "label": "Delete Data",
        "tooltip": "",
        "color": "white",
        "bgcolor": "red",
        "className": "",
        "icon": "fa-trash",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 910,
        "y": 580,
        "wires": [
            [
                "7bf629f226e333b2"
            ]
        ]
    },
    {
        "id": "3d916e8f9912bbf3",
        "type": "ui_chart",
        "z": "aff208f6d9a2dcb3",
        "name": "",
        "group": "240763e370494493",
        "order": 1,
        "width": 0,
        "height": 0,
        "label": "Data Curah Hujan",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "There is no data, try to refresh",
        "dot": false,
        "ymin": "0",
        "ymax": "50",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1370,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "a1a9ce7b0d2187e9",
        "type": "mqtt in",
        "z": "aff208f6d9a2dcb3",
        "name": "",
        "topic": "sensor-pkl/humidity",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "a2f96cead7353d8d",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 250,
        "y": 720,
        "wires": [
            [
                "8730c9f2ee8d6810"
            ]
        ]
    },
    {
        "id": "9cf25f5bd71138a0",
        "type": "function",
        "z": "aff208f6d9a2dcb3",
        "name": "Format Data",
        "func": "var data = [[], []];\nvar label = [];\n\nfor (var i = 0; i < msg.payload.rows.length; i++) {\n    var row = msg.payload.rows[i];\n    data[0].push(row['temp']);  // ambil nilai curah hujan\n    data[1].push(row['rh']);\n    \n    // Ambil jam dan menit dari created_at\n    const d = new Date(row['created_at']);\n    // d.setHours(d.getHours() + 7);\n    const hours = String(d.getHours()).padStart(2, '0');\n    const minutes = String(d.getMinutes()).padStart(2, '0');\n\n    // Format jadi HH:MM\n    label.push(`${hours}:${minutes}`);\n}\n\nvar m = {\n    series: [\"Temperature\", \"Humidity\"],\n    data: data,\n    labels: label\n};\n\nmsg.payload = [m];\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 860,
        "wires": [
            [
                "02253d00dbdf2e44"
            ]
        ]
    },
    {
        "id": "6112ac9a1e12f1e3",
        "type": "function",
        "z": "aff208f6d9a2dcb3",
        "name": "Delete data",
        "func": "msg.payload = [];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 920,
        "wires": [
            [
                "02253d00dbdf2e44"
            ]
        ]
    },
    {
        "id": "b5497b91211c1daa",
        "type": "postgrestor",
        "z": "aff208f6d9a2dcb3",
        "name": "sensor value",
        "query": "SELECT *\nFROM (\n    SELECT *\n    FROM humidity\n    ORDER BY id DESC\n    LIMIT 10\n) AS latest\nORDER BY id ASC;\n",
        "postgresDB": "d1c317d01ab06818",
        "output": true,
        "outputs": 1,
        "throwErrors": false,
        "x": 890,
        "y": 860,
        "wires": [
            [
                "9cf25f5bd71138a0"
            ]
        ]
    },
    {
        "id": "f39582994e451129",
        "type": "postgrestor",
        "z": "aff208f6d9a2dcb3",
        "name": "input sensor value humi",
        "query": "INSERT INTO humidity (temp, rh, created_at, updated_at) \nVALUES ('{{ msg.payload.temp }}', {{ msg.payload.rh }}, '{{ msg.payload.createdAt }}', '{{ msg.payload.createdAt }}');",
        "postgresDB": "d1c317d01ab06818",
        "output": true,
        "outputs": 1,
        "throwErrors": false,
        "x": 690,
        "y": 800,
        "wires": [
            [
                "b5497b91211c1daa"
            ]
        ]
    },
    {
        "id": "39b17ad1ac7b1769",
        "type": "ui_button",
        "z": "aff208f6d9a2dcb3",
        "name": "",
        "group": "240763e370494493",
        "order": 7,
        "width": 7,
        "height": 1,
        "passthru": false,
        "label": "Refresh Data Kelembapan",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-refresh",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 560,
        "y": 860,
        "wires": [
            [
                "b5497b91211c1daa"
            ]
        ]
    },
    {
        "id": "0692b574e92a97a4",
        "type": "ui_button",
        "z": "aff208f6d9a2dcb3",
        "name": "",
        "group": "240763e370494493",
        "order": 6,
        "width": 7,
        "height": 1,
        "passthru": false,
        "label": "Delete Data",
        "tooltip": "",
        "color": "white",
        "bgcolor": "red",
        "className": "",
        "icon": "fa-trash",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 890,
        "y": 920,
        "wires": [
            [
                "6112ac9a1e12f1e3"
            ]
        ]
    },
    {
        "id": "02253d00dbdf2e44",
        "type": "ui_chart",
        "z": "aff208f6d9a2dcb3",
        "name": "",
        "group": "240763e370494493",
        "order": 5,
        "width": 0,
        "height": 0,
        "label": "Data Kelembapan Udara",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "There is no data, try to refresh",
        "dot": false,
        "ymin": "0",
        "ymax": "100",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1370,
        "y": 860,
        "wires": [
            []
        ]
    },
    {
        "id": "c4264296122473b2",
        "type": "mqtt in",
        "z": "aff208f6d9a2dcb3",
        "name": "",
        "topic": "sensor-pkl/soil_moisture",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "a2f96cead7353d8d",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 220,
        "y": 960,
        "wires": [
            [
                "1633a06207eee9c3"
            ]
        ]
    },
    {
        "id": "1ea9e2da93ed182e",
        "type": "function",
        "z": "aff208f6d9a2dcb3",
        "name": "Format Data",
        "func": "var data = [[]];\nvar label = [];\n\nfor (var i = 0; i < msg.payload.rows.length; i++) {\n    var row = msg.payload.rows[i];\n    data[0].push(row['moisture']);  // ambil nilai curah hujan\n   \n    const d = new Date(row['created_at']);\n    // d.setHours(d.getHours() + 7);\n    const hours = String(d.getHours()).padStart(2, '0');\n    const minutes = String(d.getMinutes()).padStart(2, '0');\n\n    // Format jadi HH:MM\n    label.push(`${hours}:${minutes}`);\n}\n\nvar m = {\n    series: [\"Kelembapan tanah (%)\", \"status\"],\n    data: data,\n    labels: label,\n};\n\nmsg.payload = [m];\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 1120,
        "wires": [
            [
                "627c7aa2d4271dd9"
            ]
        ]
    },
    {
        "id": "e1659aababe4ce9a",
        "type": "function",
        "z": "aff208f6d9a2dcb3",
        "name": "Delete data",
        "func": "msg.payload = [];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 1180,
        "wires": [
            [
                "627c7aa2d4271dd9"
            ]
        ]
    },
    {
        "id": "6a7b0a7841f38bd8",
        "type": "postgrestor",
        "z": "aff208f6d9a2dcb3",
        "name": "sensor value",
        "query": "SELECT *\nFROM (\n    SELECT *\n    FROM soil_moisture\n    ORDER BY id DESC\n    LIMIT 10\n) AS latest\nORDER BY id ASC;\n",
        "postgresDB": "d1c317d01ab06818",
        "output": true,
        "outputs": 1,
        "throwErrors": false,
        "x": 890,
        "y": 1120,
        "wires": [
            [
                "1ea9e2da93ed182e"
            ]
        ]
    },
    {
        "id": "f566d31da07d1f49",
        "type": "postgrestor",
        "z": "aff208f6d9a2dcb3",
        "name": "input sensor value soil",
        "query": "INSERT INTO soil_moisture (moisture, status, created_at, updated_at) \nVALUES ({{ msg.payload.moisture }}, '{{ msg.payload.status }}', '{{ msg.payload.createdAt }}', '{{ msg.payload.createdAt }}');",
        "postgresDB": "d1c317d01ab06818",
        "output": true,
        "outputs": 1,
        "throwErrors": false,
        "x": 680,
        "y": 1060,
        "wires": [
            [
                "6a7b0a7841f38bd8"
            ]
        ]
    },
    {
        "id": "029606ceefa1a831",
        "type": "ui_button",
        "z": "aff208f6d9a2dcb3",
        "name": "",
        "group": "240763e370494493",
        "order": 11,
        "width": 7,
        "height": 1,
        "passthru": false,
        "label": "Refresh Data Kelembapan Tanah",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-refresh",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 560,
        "y": 1160,
        "wires": [
            [
                "6a7b0a7841f38bd8"
            ]
        ]
    },
    {
        "id": "403a623b747cde83",
        "type": "ui_button",
        "z": "aff208f6d9a2dcb3",
        "name": "",
        "group": "240763e370494493",
        "order": 10,
        "width": 7,
        "height": 1,
        "passthru": false,
        "label": "Delete Data",
        "tooltip": "",
        "color": "white",
        "bgcolor": "red",
        "className": "",
        "icon": "fa-trash",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 890,
        "y": 1180,
        "wires": [
            [
                "e1659aababe4ce9a"
            ]
        ]
    },
    {
        "id": "627c7aa2d4271dd9",
        "type": "ui_chart",
        "z": "aff208f6d9a2dcb3",
        "name": "",
        "group": "240763e370494493",
        "order": 9,
        "width": 0,
        "height": 0,
        "label": "Data Kelembapan tanah",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "There is no data, try to refresh",
        "dot": false,
        "ymin": "0",
        "ymax": "50",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1370,
        "y": 1120,
        "wires": [
            []
        ]
    },
    {
        "id": "8730c9f2ee8d6810",
        "type": "function",
        "z": "aff208f6d9a2dcb3",
        "name": "get data",
        "func": "// Ambil nilai dari msg.payload.value\nlet temp = msg.payload.temp;\nlet rh = msg.payload.rh;\nlet d = new Date();\n// geser ke +7 jam\nd.setHours(d.getHours() + 7);\nlet createdAt = d.toISOString();\n\n\n// pastikan moisture adalah angka\nlet tempNum = parseFloat(temp);\nif (isNaN(tempNum)) {\n    tempNum = 0;  // default kalau kosong/error\n}\nlet rhNum = parseFloat(rh);\nif (isNaN(rhNum)) {\n    rhNum = 0;  // default kalau kosong/error\n}\n\n// set payload baru\nmsg.payload = {\n    temp: tempNum,\n    rh: rhNum,\n    createdAt: createdAt\n};\n\nreturn msg;\n ",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 720,
        "wires": [
            [
                "f39582994e451129",
                "48d732b7a1fe4d88"
            ]
        ]
    },
    {
        "id": "1633a06207eee9c3",
        "type": "function",
        "z": "aff208f6d9a2dcb3",
        "name": "get data",
        "func": "let moisture = msg.payload.moisture;\nlet status = msg.payload.status;\n\n// Data jam yang kamu terima\nlet timeStr = msg.payload.created_at; // contoh: \"00:00:38.336\"\n\n// Ambil tanggal hari ini (tanpa jam)\nlet d = new Date();\n// geser ke +7 jam\nd.setHours(d.getHours() + 7);\nlet createdAt = d.toISOString();\n\n// Gabungkan jadi format ISO lengkap\n// let createdAtStr = `${today}T${timeStr}Z`;\n\n// Buat object Date dari string\n// let createdAt = new Date(createdAtStr);\n\n// pastikan moisture adalah angka\nlet moistureNum = parseFloat(moisture);\nif (isNaN(moistureNum)) {\n    moistureNum = 0;  // default kalau kosong/error\n}\n\n// set payload baru\nmsg.payload = {\n    moisture: moistureNum,\n    status: status || \"\",\n    createdAt: createdAt\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 960,
        "wires": [
            [
                "f566d31da07d1f49",
                "53403d180a7561c4"
            ]
        ]
    },
    {
        "id": "53403d180a7561c4",
        "type": "debug",
        "z": "aff208f6d9a2dcb3",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 960,
        "wires": []
    },
    {
        "id": "48d732b7a1fe4d88",
        "type": "debug",
        "z": "aff208f6d9a2dcb3",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 680,
        "wires": []
    },
    {
        "id": "015ed2252f17c8f3",
        "type": "debug",
        "z": "aff208f6d9a2dcb3",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 340,
        "wires": []
    },
    {
        "id": "503affb91ea96b37",
        "type": "ui_spacer",
        "z": "aff208f6d9a2dcb3",
        "name": "spacer",
        "group": "240763e370494493",
        "order": 4,
        "width": 14,
        "height": 1
    },
    {
        "id": "51efebe5904848f3",
        "type": "ui_spacer",
        "z": "aff208f6d9a2dcb3",
        "name": "spacer",
        "group": "240763e370494493",
        "order": 8,
        "width": 14,
        "height": 1
    },
    {
        "id": "a2f96cead7353d8d",
        "type": "mqtt-broker",
        "name": "pkl",
        "broker": "broker.emqx.io",
        "port": 1883,
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": 4,
        "keepalive": 60,
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "d1c317d01ab06818",
        "type": "postgresDB",
        "name": "local db",
        "throwErrors": true,
        "throwErrorsFieldType": "bool",
        "host": "postgres",
        "hostFieldType": "str",
        "port": 5432,
        "portFieldType": "num",
        "database": "nodered_db",
        "databaseFieldType": "str",
        "ssl": "false",
        "sslFieldType": "bool",
        "max": 10,
        "maxFieldType": "num",
        "min": 1,
        "minFieldType": "num",
        "idle": 1000,
        "idleFieldType": "num",
        "connectionTimeout": 10000,
        "connectionTimeoutFieldType": "num",
        "user": "nodered_user",
        "userFieldType": "str",
        "password": "supersecretpassword",
        "passwordFieldType": "str"
    },
    {
        "id": "240763e370494493",
        "type": "ui_group",
        "name": "Status Cuaca",
        "tab": "d7998e1129f0fec4",
        "order": 1,
        "disp": false,
        "width": 14,
        "collapse": false,
        "className": ""
    },
    {
        "id": "d7998e1129f0fec4",
        "type": "ui_tab",
        "name": "PKL BRMP Jestro",
        "icon": "fa-pie-chart",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "da14a571d9936dff",
        "type": "global-config",
        "env": [],
        "modules": {
            "node-red-contrib-postgrestor-next": "0.5.2",
            "node-red-dashboard": "3.6.6"
        }
    }
]
